// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float> map;
StructuredBuffer<int> randomIndices;
StructuredBuffer<int> brushIndices;
StructuredBuffer<float> brushWeights;

int mapSize;
int brushLength;
int borderSize;

int maxLifeTime;
float inertia;
float sedimentCapacityFactor;
float minSedimentCapacity;
float depositSpeed;
float erodeSpeed;

float evaporateSpeed;
float gravity;
float startSpeed;
float startWater;

float3 CalculateHeightAndGradient(float posX, float posY) {
	int coordX = (int)posX;
	int coordY = (int)posY;

	float x = posX - coordX;
	float y = posY - coordY;

	int nodeIndexNW = coordY * mapSize + coordX;
	float heightNW = map[nodeIndexNW];
	float heightNE = map[nodeIndexNW + 1];
	float heightSW = map[nodeIndexNW + mapSize];
	float heightSE = map[nodeIndexNW + mapSize + 1];

	float gradientX = (heightNE - heightNW) * (1 - y) + (heightSE - heightSW) * y;
	float gradientY = (heightSW - heightNW) * (1 - x) + (heightSE - heightNE) * x;

	float height = heightNW * (1 - x) * (1 - y) + heightNE * x * (1 - y) + heightSW * (1 - x) * y + heightSE * x * y;

	return float3(gradientX, gradientY, height);
}

[numthreads(1024,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int index = randomIndices[id.x];
	float posX = float(index) % mapSize;
	float posY = float(index) / mapSize;
	float dirX = 0;
	float dirY = 0;
	float speed = startSpeed;
	float water = startWater;
	float sediment = 0;

	for (int lifetime = 0; lifetime < maxLifeTime; lifetime++)
	{
		int nodeX = (int)posX;
		int nodeY = (int)posY;
		int dropletIndex = nodeY * mapSize + nodeX;

		float cellOffsetX = posX - nodeX;
		float cellOffsetY = posY - nodeY;

		float3 heighAndGradient = CalculateHeightAndGradient(posX, posY);

		dirX = (dirX * inertia - heightAndGradient.x * (1 - inertia));
		dirY = (dirY * inertia - heightAndGradient.y * (1 - inertia));

		float len = max(0.01, sqrt(dirX * dirX + dirY * dirY));
		dirX /= len;
		dirY /= len;
		posX += dirX;
		posY += dirY;

		if ((dirX == 0 && dirY == 0) || posX < borderSize || posX > mapSize - borderSize || posY < borderSize || posY > mapSize - borderSize) {
			break;
		}

		float newHeight = CalculateHeightAndGradient(posX, posY).z;
		float deltaHeight = newHeight * heightAndGradient.z;

		float sedimentCapacity = max(-deltaHeight * speed * water * sedimanetCapacityFactor, minSedimentCapacity);

		if (sediment > sedimentCapacity || deltaHeight > 0) {
			float amountToDeposit = (deltaHeight > 0) ? min(deltaHeight, sediment) : (sediment - sedimentCapacity) * depositSpeed;
			sediment -= amountToDeposit;

			map[dropletIndex] += amountToDeposit * (1 - cellOffsetX) * (1 - cellOffsetY);
			map[dropletIndex + 1] += amountToDeposit * cellOffsetX * (1 - cellOffsetY);
			map[dropletIndex + mapSize] += amountToDeposit * (1 - cellOffsetX) * cellOffsetY;
			map[dropletIndex + mapSize + 1] += amountToDeposit * cellOffsetX * cellOffsetY;
		}
		else {
			float amountToErode = min((sedimentCapacity - sediment) * erodeSpeed, -deltaHeight);

			for (int i = 0; i < brushLength; i++)
			{
				int erodeIndex = dropletIndex + brushIndices[i];

				float weightedErodeAmount = amountToErode * brushWeights[i];
				float deltaSediment = (map[erodeIndex] < weightedErodeAmount) ? map[erodeIndex] : weightedErodeAmount;
				map[erodeIndex] -= deltaSediment;
				sediment += deltaSediment;
			}
		}

		speed = sqrt(max(0, speed * speed + deltaHeight * gravity));
		water *= (1 - evaporateSpeed);
	}
}
